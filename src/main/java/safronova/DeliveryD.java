package safronova;import safronova.exceptions.FragileFarDeliveryException;import safronova.exceptions.NoDistanceException;import java.text.DecimalFormat;/** * Class for imitating a work of delivery service with calculating a final cost by delivery parameters */public class DeliveryD{        public static final double MINIMUM_DELIVERY_AMOUNT = 400;        private final int destinationDistance;    private final CargoDimension cargoDimensions;    private final boolean isFragile;    private final ServiceWorkload deliveryServiceWorkload;    private int distance;        public DeliveryD(int destinationDistance, CargoDimension cargoDimensions, boolean isFragile, ServiceWorkload deliveryServiceWorkload) {        this.destinationDistance = destinationDistance;        this.cargoDimensions = cargoDimensions;        this.isFragile = isFragile;        this.deliveryServiceWorkload = deliveryServiceWorkload;    }        /**     * Returns additional cost based on the destination distance     * @param destinationDistance - distance to the target     * @return calculated cost     */    private int getDestinationDistanceCostIncrease(int destinationDistance) {        if (destinationDistance > 30) return 300;        if (destinationDistance > 10) return 200;        if (destinationDistance > 2) return 100;        if (destinationDistance >= 0) return 50;        throw new IllegalArgumentException("destinationDistance should be a positive number!");    }        /**     * Returns additional cost based on the fragility of the item     * @param isFragile - is item fragile or not     * @return calculated cost, zero for a not fragile item     */    private int getFragileCostIncrease(boolean isFragile) {        return isFragile ? 300 : 0;        //  if (isFragile) {        //    return 300;        //  } else {        //    return 0;        //  }    }        /**     * Returns delivery cost or an error, if there are wrong input     * @return calculated cost or default if calculated is less than 400     **/        public  double calculateDeliveryCost( ) {        if (this.isFragile && this.destinationDistance > 30)            throw new UnsupportedOperationException("Fragile cargo cannot be delivered for the distance more than 30");                double calculatedDeliveryCost = (getDestinationDistanceCostIncrease(this.destinationDistance)                + this.cargoDimensions.getCostIncrease()                + getFragileCostIncrease(this.isFragile))                * this.deliveryServiceWorkload.getDeliveryRate();                DecimalFormat df = new DecimalFormat("###");        return Math.max(Double.parseDouble(df.format(calculatedDeliveryCost)), MINIMUM_DELIVERY_AMOUNT);    }        public void checkDistance( int distance ) throws FragileFarDeliveryException {        if (isFragile && distance > 30) {                        throw new FragileFarDeliveryException( "Хрупкий груз нельзя перевозить дальше 30 км.");                    }            }        public void checkDeliveryCost() throws NoDistanceException {                if (this.isFragile && this.destinationDistance > 30) {                        throw new NoDistanceException( "Расстояние должно быть больше 0." );                    }            }    //    public Integer calculateFragilityCoefficient(Boolean fragility) {////        if (fragility) {//            return 300;//        } else {//            return 0;//        }//    }    //    public Integer calculateDistanceCoefficient(Double distanceKm) {//        if (distanceKm > 30) {//            return 300;//        } else if (distanceKm <= 30 && distanceKm > 10) {//            return 200;//        } else if (distanceKm <= 2 && distanceKm > 0) {//            return 50;//        } else if (distanceKm <= 10 && distanceKm > 2) {//            return 100;//        }//        else {//            throw new IllegalArgumentException("Unknown value: " + distanceKm);//        }//    }}