public class Delivery {        //  Основной класс для расчета доставки    //  Объединяет все расчеты и возвращает итоговую стоимость доставки, учитывая минимальную сумму.        private final DistanceCalculator distanceCalculator;    private final SizeCalculator sizeCalculator;    private final FragilityCalculator fragilityCalculator;    private final WorkloadMultiplier workloadMultiplier;        public Delivery() {        this.distanceCalculator = new DistanceCalculator();        this.sizeCalculator = new SizeCalculator();        this.fragilityCalculator = new FragilityCalculator();        this.workloadMultiplier = new WorkloadMultiplier();    }        public double calculateTotalCost(double distance, String size, boolean isFragile, String workload) {        double distanceCost = distanceCalculator.calculateCost(distance);        double sizeCost = sizeCalculator.calculateCost(size);        double fragilityCost = fragilityCalculator.calculateCost(isFragile, distance);        double multiplier = workloadMultiplier.getMultiplier(workload);                double totalCost = (distanceCost + sizeCost + fragilityCost) * multiplier;                // Проверка на минимальную стоимость доставки        return Math.max(totalCost, 400);    }}