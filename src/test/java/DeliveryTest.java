import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import org.junit.jupiter.params.ParameterizedTest;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertThrows;public class DeliveryTest {  Delivery deliveryCalculator;        @BeforeEach    void init() {                deliveryCalculator = new Delivery();    }        @Test    @DisplayName("должен верно рассчитывать коэффициент хрупкости")    void shouldGetFragilityCoefficientTest() {        double baseCost = 0;   // Расстояние в км  "коэффициент должен быть равен 300"        String size = "большие";  // Габариты груза        boolean isFragile = true;  // Хрупкость груза        String workload = "высокая";  // Загруженность службы доставки                assertEquals(770.0, deliveryCalculator                .calculateTotalCost(baseCost, size, isFragile, workload ),                "должен верно рассчитывать коэффициент хрупкости" );    }        @Test    void testCalculateCost() {        DistanceCalculator calculator = new DistanceCalculator();                assertEquals(300, calculator.calculateCost(35)); // > 30 км        assertEquals(200, calculator.calculateCost(25)); // > 10 км        assertEquals(100, calculator.calculateCost(5));  // > 2 км        assertEquals(50, calculator.calculateCost(1));   // <= 2 км    }        @Test   // @ParameterizedTest("")    void testSizeBigCalculateCost() {   // group        SizeCalculator calculator = new SizeCalculator();                assertEquals(200, calculator.calculateCost("большие")); // Большие габариты    }        @Test    void testSizeSmallCalculateCost() {        SizeCalculator calculator = new SizeCalculator();                assertEquals(100, calculator.calculateCost("маленькие")); // Маленькие габариты            }        @Test    void testSizeNullCalculateCost() {        SizeCalculator calculator = new SizeCalculator();                assertThrows(IllegalArgumentException.class, () -> calculator.calculateCost("средние")); // Неверные габариты    }        @Test    void testFragilityCalculatorCost(){  // group        FragilityCalculator calculator=new FragilityCalculator( );                assertEquals( 300,calculator.calculateCost( true,10 ) );        // Хрупкий груз, расстояние допустимо        assertEquals( 0,calculator.calculateCost( false,10 ) );        // Не хрупкий груз    }        @Test    void testFragilityCalculatorCost35() {        FragilityCalculator calculator=new FragilityCalculator( );                assertThrows(IllegalArgumentException.class, () -> calculator.calculateCost(true, 35));        // Хрупкий груз, расстояние > 30 км    }        @Test    void testGetMultiplier() {        WorkloadMultiplier multiplier = new WorkloadMultiplier();                assertEquals(1.6, multiplier.getMultiplier("очень высокая")); // Очень высокая загруженность        assertEquals(1.4, multiplier.getMultiplier("высокая"));       // Высокая загруженность        assertEquals(1.2, multiplier.getMultiplier("повышенная"));    // Повышенная загруженность        assertEquals(1.0, multiplier.getMultiplier("обычная"));       // Обычная загруженность    }        @Test    void testCalculateTotalCost() {  // group all        Delivery delivery = new Delivery();                // Пример 1: Обычный случай        double cost1 = delivery.calculateTotalCost(25, "большие", true, "высокая");        assertEquals(980, cost1); // (200 + 200 + 300) * 1.4 = 980                // Пример 2: Минимальная стоимость        double cost2 = delivery.calculateTotalCost(1, "маленькие", false, "обычная");        assertEquals(400, cost2); // (50 + 100 + 0) * 1.0 = 150, но минимальная стоимость 400                // Пример 3: Хрупкий груз на большое расстояние (должно быть исключение)        assertThrows(IllegalArgumentException.class, () -> delivery.calculateTotalCost(35, "большие", true, "обычная"));    }        @Test    void testCalculateTotalNormalCost(){  // group        Delivery delivery=new Delivery( );                // Пример 1: Обычный случай        double cost1=delivery.calculateTotalCost( 25,"большие",true,"высокая" );        assertEquals( 980,cost1 ); // (200 + 200 + 300) * 1.4 = 980    }        @Test    void testCalculateTotalMinimumCost() {        Delivery delivery = new Delivery();                // Пример 2: Минимальная стоимость        double cost2 = delivery.calculateTotalCost(1, "маленькие", false, "обычная");        assertEquals(400, cost2); // (50 + 100 + 0) * 1.0 = 150, но минимальная стоимость 400    }        @Test    void testCalculateTotalExceptionCost() {        Delivery delivery = new Delivery();                // Пример 3: Хрупкий груз на большое расстояние (должно быть исключение)        assertThrows(IllegalArgumentException.class, () -> delivery.calculateTotalCost(35, "большие", true, "обычная"));    }}