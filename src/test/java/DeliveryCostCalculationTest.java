import org.junit.jupiter.api.Assertions;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Tag;import org.junit.jupiter.api.Test;import org.junit.jupiter.params.ParameterizedTest;import org.junit.jupiter.params.provider.CsvSource;import org.junit.jupiter.params.provider.MethodSource;import org.junit.jupiter.params.provider.ValueSource;import safronova.CargoDimension;import safronova.DeliveryCostCalculator;import safronova.DeliveryD;import safronova.ServiceWorkload;import safronova.exceptions.FragileFarDeliveryException;import safronova.exceptions.NoDistanceException;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertThrows;import static safronova.CargoDimension.LARGE;import static safronova.DeliveryD.MINIMUM_DELIVERY_AMOUNT;import static safronova.ServiceWorkload.*;public class DeliveryCostCalculationTest {        DeliveryD delivery;    //    @ParameterizedTest//    @MethodSource("parametersAfter30")//    @DisplayName("должен отдавать правильный коэффициент на расстояние больше 30 км")//    void shouldGetRightDimensionsCoefficient300(Double km) {//        Integer expectedCoefficient = 300;////        assertEquals( expectedCoefficient, delivery.calculateDistanceCoefficient(km),//                "коэффициент должен быть равен 300 " + km);////    }    //    @ParameterizedTest//    @MethodSource("parametersBefore30")//    @DisplayName("должен отдавать правильный коэффициент на расстояние меньше 30 км")//    void shouldGetRightDimensionsCoefficient200(Double km) {//        Integer expectedCoefficient = 200;////        assertEquals(expectedCoefficient, delivery.calculateDistanceCoefficient(km),//                "коэффициент должен быть равен 200 " + km);//    }////    @ParameterizedTest//    @MethodSource("parametersBefore10")//    @DisplayName("должен отдавать правильный коэффициент на расстояние меньше 10 км")//    void shouldGetRightDimensionsCoefficient100(Double km) {//        Integer expectedCoefficient = 100;////        assertEquals(expectedCoefficient, delivery.calculateDistanceCoefficient(km),//                "коэффициент должен быть равен 100 " + km);//    }    //    @Test//    @DisplayName("должен верно рассчитывать коэффициент хрупкости")//    void shouldGetFragilityCoefficientTrue() {//       // Boolean fragility = true;//////    }    @ParameterizedTest    @Tag("Smoke")    @DisplayName( "должен отдавать правильный коэффициент на расстояние больше" )    @CsvSource({"1,50", "8,100", "25,200"})    void testCheapestOrder() {        delivery = new DeliveryD(1, CargoDimension.SMALL, false, ServiceWorkload.NORMAL);                 double actionResult = delivery.calculateDeliveryCost();         double expectResult = 400;                assertEquals(expectResult, actionResult);    }        @Test    @Tag( "Negative" )    @DisplayName( "должен отдавать правильный коэффициент на расстояние меньше нуля и ноль" )   // @ValueSource(ints={ -1,0 })    void testDenyDeliveryException( ) {               // assertEquals("должен отдавать правильный коэффициент на расстояние меньше нуля и ноль", thrown.getMessage());        //        Exception exception = assertThrows( FragileFarDeliveryException.class, () ->//                new DeliveryD(distanceKM, LARGE, true, HIGH),//                "Должно быть выброшено исключение" );        //        Throwable thrown = null ;//        assertEquals( "Хрупкий груз нельзя перевозить дальше 30 км.",//                thrown.getMessage());            }        // Расстояние должно быть больше 0.    @ParameterizedTest    @Tag( "Negative" )    @DisplayName( "Расстояние должно быть больше 0." )    @ValueSource(ints={ 99, 31, 45 })    void testDenyDeliveryCost(int distanceKM) {                assertThrows( NoDistanceException.class,( )->new DeliveryD( distanceKM,CargoDimension.SMALL,false,NORMAL ),"Очень большое расстояние, минимальная стоимость." );                Throwable thrown = null ;        assertEquals( "Очень большое расстояние, минимальная стоимость.",                thrown.getMessage());            }        @ParameterizedTest    @CsvSource({            "99, LARGE, false, VERY_HIGH",           " Хрупкие грузы нельзя возить на расстояние более 30 км."})    void testDeliveryCost( ) {                assertThrows( FragileFarDeliveryException.class,                () -> new DeliveryD( 99, LARGE, false , VERY_HIGH ),                "Хрупкие грузы нельзя возить на расстояние более 30 км.");                //DeliveryCostCalculator.calculateDeliveryCost( delivery, LARGE, false,1.6), "";    }                @Test    @Tag("Positive")    void testMoreThanMinimalOrderCost() {       delivery = new DeliveryD(1, CargoDimension.SMALL, true, ServiceWorkload.NORMAL);        assertEquals(450, delivery.calculateDeliveryCost());    }        @Test    @Tag("Positive")    void test5KmDistanceWithVeryHighWorkloadOrderCost() {        delivery = new DeliveryD(5, LARGE, true, VERY_HIGH);                assertEquals(960, delivery.calculateDeliveryCost());    }        @Test    @Tag("Positive")    void test15KmDistanceWithHighWorkloadOrderCost() {        delivery = new DeliveryD(15, LARGE, true, HIGH);                assertEquals(980, delivery.calculateDeliveryCost());    }        @Test    @Tag("Positive")    void test35KmDistanceWithIncreasedWorkloadOrderCost() {        delivery = new DeliveryD(35, LARGE, false, ServiceWorkload.INCREASED);                assertEquals(600, delivery.calculateDeliveryCost());    }        @Test    @Tag("Positive")    void testExact30KmDistanceWithFragileOrderCost() {        delivery = new DeliveryD(30, LARGE, true, ServiceWorkload.NORMAL);                assertEquals(700, delivery.calculateDeliveryCost());    }        @Test    @Tag("Positive")    void testExact2KmDistanceWithFragileOrderCost() {        delivery = new DeliveryD(2, LARGE, true, VERY_HIGH);                assertEquals(880, delivery.calculateDeliveryCost());    }            @Test    @Tag("Negative")    void testNegativeDistanceOrderCost() {        delivery = new DeliveryD(-1, CargoDimension.SMALL, false, ServiceWorkload.NORMAL);        Throwable exception = assertThrows(                IllegalArgumentException.class,                delivery::calculateDeliveryCost        );                assertEquals("destinationDistance should be a positive number!", exception.getMessage());    }        @Test    @Tag("Negative")    void test31KmDistanceFragileOrderCost() {        delivery = new DeliveryD(35, CargoDimension.SMALL, true, ServiceWorkload.NORMAL);                Throwable exception = assertThrows(                UnsupportedOperationException.class,                delivery::calculateDeliveryCost        );                assertEquals("Fragile cargo cannot be delivered for the distance more than 30", exception.getMessage());    }        }